cat.fontfamily = "sans"
)
# 绘制韦恩图
venn.diagram(
x = list(set1, set2, set3),
category.names = c("AUS", "HK", "MC"),
filename = "venn_diagram.png",  # 保存为PNG文件
output = TRUE,
compression = "lzw",
lwd = 2,
lty = 'blank',
fill = c("#85a894", "#3f6b7e", "#fce4a8"),
cex = 1,
fontface = "bold",
fontfamily = "sans",
cat.cex = 1,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans"
)
# 绘制韦恩图
venn.diagram(
x = list(set1, set2, set3),
category.names = c("AUS", "HK", "MC"),
filename = "venn_diagram.png",  # 保存为PNG文件
output = TRUE,
compression = "lzw",
lwd = 2,resolution = 300,
lty = 'blank',
fill = c("#85a894", "#3f6b7e", "#fce4a8"),
cex = 1,
fontface = "bold",
fontfamily = "sans",
cat.cex = 1,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans"
)
# 绘制韦恩图
venn.diagram(
x = list(set1, set2, set3),
category.names = c("AUS", "HK", "MC"),
filename = "venn_diagram.png",  # 保存为PNG文件
output = TRUE,
compression = "lzw",
lwd = 2,resolution = 300,
lty = 'blank',
fill = c("#85a894", "#3f6b7e", "#fce4a8"),
cex = 1,
fontface = "bold",
fontfamily = "sans",
cat.cex = 1,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans"
)
# 绘制韦恩图
venn.diagram(
x = list(set1, set2, set3),
category.names = c("AUS", "HK", "MC"),
filename = "venn_diagram.png",  # 保存为PNG文件
output = TRUE,
compression = "lzw",
lwd = 2,width = 1000,height = 1000,resolution = 300,
lty = 'blank',
fill = c("#85a894", "#3f6b7e", "#fce4a8"),
cex = 1,
fontface = "bold",
fontfamily = "sans",
cat.cex = 1,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans"
)
venn_aus_sp <- read.csv('output_Region_pathway_AUS/significant_results.tsv',sep='\t',header = T)
range(venn_aus_sp$qval)
max(venn_aus_sp$qval)
max(venn_aus_sp$pval)
rm(list = ls())
setwd('/Users/yangwanyi/Downloads/ENIGMA_STUDY_DATA/4maaslin2/')
# 加载MaAsLin2
library(Maaslin2)
library(dplyr)
# 输入数据
microbiome_data <- read.csv("../3diversity/new_species_meta_df.csv", row.names = 1)
microbiome_data$Group <- ifelse(microbiome_data$Group != "Control","CD","Control")
# keep <- apply(microbiome_data[,10:ncol(microbiome_data)], 2, mean) > 1E-4 &
#   apply(microbiome_data[,10:ncol(microbiome_data)] > 0, 2, sum) / nrow(microbiome_data[,10:ncol(microbiome_data)]) > 0.1 # mean abundance > 1E-4、Prevalence > 0.1
# microbiome_data <- microbiome_data[, keep]
microbiome_data <- microbiome_data[,10:ncol(microbiome_data)]
dim(microbiome_data)
saveRDS(microbiome_data,file = 'microbiome_data.rds')
metadata <- read.csv('../3diversity/new_metadata.csv',row.names = 1)
metadata1 <- metadata
metadata1$Region <- ifelse(metadata$Region == 'AUS','AUS','other')
fit_data <- Maaslin2(
microbiome_data, metadata1,
output = 'output_Region_species_AUS',
min_abundance = 0.01,       # 过滤低丰度物种（>1%平均丰度）
min_prevalence = 0.1,       # 过滤低存在率物种（>10%样本存在）
normalization = "CLR",      # 使用CLR处理组成型数据
transform = "NONE",         # CLR后无需再次转换
analysis_method = "LM",     # 保持线性模型（CLR后数据更接近正态）
fixed_effects = c('Region'),
reference = c("Region,other"),
correction = "BH",          # 默认FDR校正
standardize = FALSE,
plot_heatmap = FALSE,
plot_scatter = FALSE,
cores=4)
metadata2 <- metadata
metadata2$Region <- ifelse(metadata$Region == 'HK','HK','other')
fit_data <- Maaslin2(
microbiome_data, metadata2,
output = 'output_Region_species_HK',
min_abundance = 0.01,       # 过滤低丰度物种（>1%平均丰度）
min_prevalence = 0.1,       # 过滤低存在率物种（>10%样本存在）
normalization = "CLR",      # 使用CLR处理组成型数据
transform = "NONE",         # CLR后无需再次转换
analysis_method = "LM",     # 保持线性模型（CLR后数据更接近正态）
fixed_effects = c('Region'),
reference = c("Region,other"),
correction = "BH",          # 默认FDR校正
standardize = FALSE,
plot_heatmap = FALSE,
plot_scatter = FALSE,
cores=4)
metadata3 <- metadata
metadata3$Region <- ifelse(metadata$Region == 'MC','MC','other')
fit_data <- Maaslin2(
microbiome_data, metadata3,
output = 'output_Region_species_MC',
min_abundance = 0.01,       # 过滤低丰度物种（>1%平均丰度）
min_prevalence = 0.1,       # 过滤低存在率物种（>10%样本存在）
normalization = "CLR",      # 使用CLR处理组成型数据
transform = "NONE",         # CLR后无需再次转换
analysis_method = "LM",     # 保持线性模型（CLR后数据更接近正态）
fixed_effects = c('Region'),
reference = c("Region,other"),
correction = "BH",          # 默认FDR校正
standardize = FALSE,
plot_heatmap = FALSE,
plot_scatter = FALSE,
cores=4)
#
# sig_res <- read.csv('output_Group/significant_results.tsv',sep = '\t',header = T)
# sig_res$CD_status <- ifelse(sig_res$coef>0,'CD enriched','CD depleted')
# rownames(sig_res) <- sig_res$feature
# sig_res <- sig_res[,'CD_status',drop=FALSE]
# sig_res <- sig_res %>%
#   arrange(CD_status)
#
# microbiome_data_df <- read.csv('output_Group/features/filtered_data_norm_transformed.tsv',sep = '\t',header = T,row.names = 1)
# pheatmap_df <- microbiome_data_df[,rownames(sig_res)]
#
# p1 <- pheatmap::pheatmap(t(pheatmap_df),
#                    annotation_row = sig_res,
#                    cutree_cols = 7,cluster_rows = F,
#                    # cluster_rows = FALSE,
#                    annotation_col = metadata[,c('Group','Gender','Region','Smoke')],
#                    show_rownames = FALSE,
#                    show_colnames = FALSE)
#
# heatmap_clusters <- cutree(p1$tree_col, k = 7)  # 把列聚成7类
#
# metadata$Cluster <- as.factor(heatmap_clusters[rownames(metadata)])  # 匹配样本顺序
#
# # 再画一个更新后的热图
# p2 <- pheatmap::pheatmap(t(pheatmap_df),
#                          annotation_row = sig_res,
#                          # scale = 'row',
#                          cutree_cols = 7,
#                          cluster_rows = FALSE,
#                          annotation_col = metadata[,c('Cluster','Group','Gender','Region','Smoke')],
#                          show_rownames = FALSE,
#                          show_colnames = FALSE,
#                          filename = 'species_heatmap.pdf',
#                          width = 10,height = 12)
rm(list = ls())
library(VennDiagram)
setwd('/Users/yangwanyi/Downloads/ENIGMA_STUDY_DATA/4maaslin2/')
venn_aus_sp <- read.csv('output_Region_pathway_AUS/significant_results.tsv',sep='\t',header = T)
venn_aus_hk <- read.csv('output_Region_pathway_HK/significant_results.tsv',sep='\t',header = T)
venn_aus_mc <- read.csv('output_Region_pathway_MC/significant_results.tsv',sep='\t',header = T)
dim(venn_aus_sp)
dim(venn_aus_hk)
dim(venn_aus_mc)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
venn_aus_hk
source("~/.active-rstudio-document", echo=TRUE)
source("~/Downloads/ENIGMA_STUDY_DATA/4maaslin2/maaslin2_species.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
metadata1 <- metadata
rm(list = ls())
setwd('/Users/yangwanyi/Downloads/ENIGMA_STUDY_DATA/4maaslin2/')
# 加载MaAsLin2
library(Maaslin2)
library(dplyr)
# 输入数据
microbiome_data <- read.csv("../3diversity/new_species_meta_df.csv", row.names = 1)
microbiome_data$Group <- ifelse(microbiome_data$Group != "Control","CD","Control")
# keep <- apply(microbiome_data[,10:ncol(microbiome_data)], 2, mean) > 1E-4 &
#   apply(microbiome_data[,10:ncol(microbiome_data)] > 0, 2, sum) / nrow(microbiome_data[,10:ncol(microbiome_data)]) > 0.1 # mean abundance > 1E-4、Prevalence > 0.1
# microbiome_data <- microbiome_data[, keep]
microbiome_data <- microbiome_data[,10:ncol(microbiome_data)]
dim(microbiome_data)
saveRDS(microbiome_data,file = 'microbiome_data.rds')
metadata <- read.csv('../3diversity/new_metadata.csv',row.names = 1)
# 运行MaAsLin2
metadata1 <- metadata
metadata1$Region <- ifelse(metadata$Region == 'AUS','AUS','other')
fit_data <- Maaslin2(
microbiome_data, metadata1,
output = 'output_Region_species_AUS_filter',
min_abundance = 0.01,       # 过滤低丰度物种（>1%平均丰度）
min_prevalence = 0.1,       # 过滤低存在率物种（>10%样本存在）
normalization = "CLR",      # 使用CLR处理组成型数据
transform = "NONE",         # CLR后无需再次转换
analysis_method = "LM",     # 保持线性模型（CLR后数据更接近正态）
fixed_effects = c('Region'),
reference = c("Region,other"),
correction = "BH",          # 默认FDR校正
standardize = FALSE,
plot_heatmap = FALSE,
plot_scatter = FALSE,
cores=4)
metadata2 <- metadata
metadata2$Region <- ifelse(metadata$Region == 'HK','HK','other')
fit_data <- Maaslin2(
microbiome_data, metadata2,
output = 'output_Region_species_HK_filter',
min_abundance = 0.01,       # 过滤低丰度物种（>1%平均丰度）
min_prevalence = 0.1,       # 过滤低存在率物种（>10%样本存在）
normalization = "CLR",      # 使用CLR处理组成型数据
transform = "NONE",         # CLR后无需再次转换
analysis_method = "LM",     # 保持线性模型（CLR后数据更接近正态）
fixed_effects = c('Region'),
reference = c("Region,other"),
correction = "BH",          # 默认FDR校正
standardize = FALSE,
plot_heatmap = FALSE,
plot_scatter = FALSE,
cores=4)
metadata3 <- metadata
metadata3$Region <- ifelse(metadata$Region == 'MC','MC','other')
fit_data <- Maaslin2(
microbiome_data, metadata3,
output = 'output_Region_species_MC_filter',
min_abundance = 0.01,       # 过滤低丰度物种（>1%平均丰度）
min_prevalence = 0.1,       # 过滤低存在率物种（>10%样本存在）
normalization = "CLR",      # 使用CLR处理组成型数据
transform = "NONE",         # CLR后无需再次转换
analysis_method = "LM",     # 保持线性模型（CLR后数据更接近正态）
fixed_effects = c('Region'),
reference = c("Region,other"),
correction = "BH",          # 默认FDR校正
standardize = FALSE,
plot_heatmap = FALSE,
plot_scatter = FALSE,
cores=4)
# sig_res <- read.csv('output_Group/significant_results.tsv',sep = '\t',header = T)
# sig_res$CD_status <- ifelse(sig_res$coef>0,'CD enriched','CD depleted')
# rownames(sig_res) <- sig_res$feature
# sig_res <- sig_res[,'CD_status',drop=FALSE]
# sig_res <- sig_res %>%
#   arrange(CD_status)
#
# microbiome_data_df <- read.csv('output_Group/features/filtered_data_norm_transformed.tsv',sep = '\t',header = T,row.names = 1)
# pheatmap_df <- microbiome_data_df[,rownames(sig_res)]
#
# p1 <- pheatmap::pheatmap(t(pheatmap_df),
#                    annotation_row = sig_res,
#                    cutree_cols = 7,cluster_rows = F,
#                    # cluster_rows = FALSE,
#                    annotation_col = metadata[,c('Group','Gender','Region','Smoke')],
#                    show_rownames = FALSE,
#                    show_colnames = FALSE)
#
# heatmap_clusters <- cutree(p1$tree_col, k = 7)  # 把列聚成7类
#
# metadata$Cluster <- as.factor(heatmap_clusters[rownames(metadata)])  # 匹配样本顺序
#
# # 再画一个更新后的热图
# p2 <- pheatmap::pheatmap(t(pheatmap_df),
#                          annotation_row = sig_res,
#                          # scale = 'row',
#                          cutree_cols = 7,
#                          cluster_rows = FALSE,
#                          annotation_col = metadata[,c('Cluster','Group','Gender','Region','Smoke')],
#                          show_rownames = FALSE,
#                          show_colnames = FALSE,
#                          filename = 'species_heatmap.pdf',
#                          width = 10,height = 12)
source("~/.active-rstudio-document", echo=TRUE)
setwd('/Users/yangwanyi/Downloads/ENIGMA_STUDY_DATA/4maaslin2/')
cd <- read.csv('output_Group_species/significant_results.tsv')
cd <- read.csv('output_Group_species/significant_results.tsv',sep = '\t')
cd
rm(list = ls())
setwd('/Users/yangwanyi/Downloads/ENIGMA_STUDY_DATA/4maaslin2/')
cd <- read.csv('output_Group_species/significant_results.tsv',sep = '\t')
venn_aus_sp <- read.csv('output_Region_species_AUS_filter/significant_results.tsv',sep='\t',header = T)
venn_aus_hk <- read.csv('output_Region_species_HK_filter/significant_results.tsv',sep='\t',header = T)
venn_aus_mc <- read.csv('output_Region_species_MC_filter/significant_results.tsv',sep='\t',header = T)
# 假设 venn_aus_sp$feature, venn_aus_hk$feature, venn_aus_mc$feature 是你的三个集合
set1 <- intersect(venn_aus_sp$feature,cd$feature)
set2 <- intersect(venn_aus_hk$feature,cd$feature)
set3 <- intersect(venn_aus_mc$feature,cd$feature)
set1
set2
set3
cd[cd$coef>0,]
cd_enriched <- cd[cd$coef>0,]
source("~/.active-rstudio-document", echo=TRUE)
set1_depleted
source("~/.active-rstudio-document", echo=TRUE)
# 创建数据框
venn_data_enriched <- data.frame(
feature = unique(c(set1_enriched, set2_enriched, set3_enriched)),
SP = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set1_enriched),
HK = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set2_enriched),
MC = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set3_enriched)
)
# 绘制 UpSet 图
upset(venn_data_enriched, sets = c("AUS", "HK", "MC"))
# 创建数据框
venn_data_enriched <- data.frame(
feature = unique(c(set1_enriched, set2_enriched, set3_enriched)),
AUC = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set1_enriched),
HK = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set2_enriched),
MC = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set3_enriched)
)
# 绘制 UpSet 图
upset(venn_data_enriched, sets = c("AUS", "HK", "MC"))
set1_enriched  <- intersect(venn_aus_sp$feature,cd_enriched$feature)
set2_enriched  <- intersect(venn_aus_hk$feature,cd_enriched$feature)
set3_enriched  <- intersect(venn_aus_mc$feature,cd_enriched$feature)
# 创建数据框
venn_data_enriched <- data.frame(
feature = unique(c(set1_enriched, set2_enriched, set3_enriched)),
AUC = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set1_enriched),
HK = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set2_enriched),
MC = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set3_enriched)
)
# 绘制 UpSet 图
upset(venn_data_enriched, sets = c("AUS", "HK", "MC"))
feature = unique(c(set1_enriched, set2_enriched, set3_enriched))
feature
venn_data_enriched
# 创建数据框
venn_data_enriched <- data.frame(
feature = unique(c(set1_enriched, set2_enriched, set3_enriched)),
AUS = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set1_enriched),
HK = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set2_enriched),
MC = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set3_enriched)
)
# 绘制 UpSet 图
upset(venn_data_enriched, sets = c("AUS", "HK", "MC"))
set1_depleted <- intersect(venn_aus_sp$feature,cd_depleted$feature)
set2_depleted <- intersect(venn_aus_hk$feature,cd_depleted$feature)
set3_depleted <- intersect(venn_aus_mc$feature,cd_depleted$feature)
# 创建数据框
venn_data_depleted <- data.frame(
feature = unique(c(set1_depleted, set2_depleted, set3_depleted)),
AUS = as.numeric(unique(c(set1_depleted, set2_depleted, set3_depleted)) %in% set1_depleted),
HK = as.numeric(unique(c(set1_depleted, set2_depleted, set3_depleted)) %in% set2_depleted),
MC = as.numeric(unique(c(set1_depleted, set2_depleted, set3_depleted)) %in% set3_depleted)
)
# 绘制 UpSet 图
upset(venn_data_depleted, sets = c("AUS", "HK", "MC"))
# 加载数据
venn_data_enriched <- data.frame(
feature = unique(c(set1_enriched, set2_enriched, set3_enriched)),
AUS = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set1_enriched),
HK = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set2_enriched),
MC = as.numeric(unique(c(set1_enriched, set2_enriched, set3_enriched)) %in% set3_enriched)
)
# 设置颜色
my_colors <- c("#85A894", "#3E6B7E", "#FCE4A8")
# 绘制 UpSet 图
upset(
venn_data_enriched,
sets = c("AUS", "HK", "MC"),
sets.bar.color = my_colors,  # 设置集合柱状图的颜色
main.bar.color = "black",    # 设置主柱状图的颜色
matrix.color = "black",      # 设置矩阵点的颜色
queries = list(
list(
query = elements,
params = list("AUS"),
color = my_colors[1],
active = TRUE
),
list(
query = elements,
params = list("HK"),
color = my_colors[2],
active = TRUE
),
list(
query = elements,
params = list("MC"),
color = my_colors[3],
active = TRUE
)
)
)
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),color.pal = c("#85A894", "#3E6B7E", "#FCE4A8"))
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8")
)
source("~/.active-rstudio-document", echo=TRUE)
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),keep.order = T
)
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),keep.order = TRUE
)
dev.off()
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),keep.order = TRUE
)
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),show.numbers = T,
keep.order = TRUE
)
dev.off()
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),show.numbers = T,
keep.order = TRUE
)
# 绘制 UpSet 图
upset(venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),
# show.numbers = T,
# keep.order = TRUE
)
# 打开 PDF 设备
pdf("upset_plot_depleted.pdf", width = 8, height = 6)  # 设置 PDF 文件名和尺寸
# 绘制 UpSet 图
upset(
venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),  # 设置集合柱状图的颜色
show.numbers = "yes",          # 显示数字
keep.order = TRUE              # 保持集合顺序
)
# 关闭 PDF 设备
dev.off()
# 关闭 PDF 设备
dev.off()
source("~/.active-rstudio-document", echo=TRUE)
# 绘制 UpSet 图
pdf("upset_plot_enriched.pdf", width = 8, height = 6)  # 设置 PDF 文件名和尺寸
upset(venn_data_enriched,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#ab6354",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),
show.numbers = "yes",          # 显示数字
keep.order = TRUE,              # 保持集合顺序
nintersects = NA
)
# 关闭 PDF 设备
dev.off()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 打开 PDF 设备
png("upset_plot_depleted.png", width = 6, height = 6)  # 设置 PDF 文件名和尺寸
grid.newpage()
# 绘制 UpSet 图
upset(
venn_data_depleted,
sets = c("AUS", "HK", "MC"),
main.bar.color = "#90a5a6",    # 设置主柱状图的颜色
sets.bar.color = c("#85A894", "#3E6B7E", "#FCE4A8"),  # 设置集合柱状图的颜色
show.numbers = "yes",          # 显示数字
)
# 关闭 PDF 设备
dev.off()
source("~/.active-rstudio-document", echo=TRUE)
